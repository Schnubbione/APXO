import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { GameProvider, useGame } from '../GameContext';

// Mock socket.io-client
jest.mock('socket.io-client', () => ({
  io: jest.fn(() => ({
    on: jest.fn(),
    off: jest.fn(),
    emit: jest.fn(),
    close: jest.fn(),
    id: 'test-socket-id'
  }))
}));

// Test component that uses the context
const TestComponent: React.FC = () => {
  const {
    gameState,
    currentTeam,
    isAdmin,
    tutorialActive,
    tutorialStep,
    startTutorial,
    nextTutorialStep,
    completeTutorial
  } = useGame();

  return (
    <div>
      <div data-testid="current-round">{gameState.currentRound}</div>
      <div data-testid="is-active">{gameState.isActive ? 'true' : 'false'}</div>
      <div data-testid="current-phase">{gameState.currentPhase}</div>
      <div data-testid="tutorial-active">{tutorialActive ? 'true' : 'false'}</div>
      <div data-testid="tutorial-step">{tutorialStep}</div>
      <div data-testid="current-team">{currentTeam?.name || 'No team'}</div>
      <div data-testid="is-admin">{isAdmin ? 'true' : 'false'}</div>
      <button data-testid="start-tutorial" onClick={startTutorial}>Start Tutorial</button>
      <button data-testid="next-step" onClick={nextTutorialStep}>Next Step</button>
      <button data-testid="complete-tutorial" onClick={completeTutorial}>Complete Tutorial</button>
    </div>
  );
};

// Test component that throws error when used outside provider
const ErrorTestComponent: React.FC = () => {
  try {
    useGame();
    return <div>No error</div>;
  } catch (error) {
    return <div data-testid="error-message">{(error as Error).message}</div>;
  }
};

describe('GameContext', () => {
  beforeEach(() => {
    // Clear localStorage before each test
    localStorage.clear();
  });

  test('provides default game state', () => {
    render(
      <GameProvider>
        <TestComponent />
      </GameProvider>
    );

    expect(screen.getByTestId('current-round')).toHaveTextContent('0');
    expect(screen.getByTestId('is-active')).toHaveTextContent('false');
    expect(screen.getByTestId('current-phase')).toHaveTextContent('prePurchase');
    expect(screen.getByTestId('tutorial-active')).toHaveTextContent('false');
    expect(screen.getByTestId('tutorial-step')).toHaveTextContent('0');
    expect(screen.getByTestId('current-team')).toHaveTextContent('No team');
    expect(screen.getByTestId('is-admin')).toHaveTextContent('false');
  });

  test('tutorial functions work correctly', () => {
    render(
      <GameProvider>
        <TestComponent />
      </GameProvider>
    );

    // Start tutorial
    fireEvent.click(screen.getByTestId('start-tutorial'));
    expect(screen.getByTestId('tutorial-active')).toHaveTextContent('true');
    expect(screen.getByTestId('tutorial-step')).toHaveTextContent('0');

    // Move to next step
    fireEvent.click(screen.getByTestId('next-step'));
    expect(screen.getByTestId('tutorial-step')).toHaveTextContent('1');

    // Complete tutorial
    fireEvent.click(screen.getByTestId('complete-tutorial'));
    expect(screen.getByTestId('tutorial-active')).toHaveTextContent('false');
    expect(screen.getByTestId('tutorial-step')).toHaveTextContent('0');
  });

  test('useGame hook throws error when used outside provider', () => {
    render(<ErrorTestComponent />);

    expect(screen.getByTestId('error-message')).toHaveTextContent(
      'useGame must be used within a GameProvider'
    );
  });

  test('game state includes fix seats and pooling configuration', () => {
    render(
      <GameProvider>
        <TestComponent />
      </GameProvider>
    );

    // The game state should have the new simplified structure
    // We can't easily test the exact values without more complex mocking,
    // but we can verify the component renders without errors
    expect(screen.getByTestId('current-round')).toBeInTheDocument();
  });
});